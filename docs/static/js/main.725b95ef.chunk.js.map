{"version":3,"sources":["components/QRCodeScanner.js","components/QRCodeGenerator.js","components/WebRTCVideoChat.js","App.js","serviceWorker.js","index.js"],"names":["QRCodeScanner","state","result","handleScan","data","setState","includes","concat","handleError","err","console","error","style","margin","delay","onError","this","onScan","width","maxWidth","React","Component","QRCodeGenerator","input","handleChange","chunks","str","size","numChunks","Math","ceil","length","Array","i","o","substr","chunkSubstr","target","value","log","forEach","chunk","idx","setTimeout","level","onChange","WebRTCVideoChat","setLocalOffer","chatEnabled","_chatChannel","pc","createDataChannel","_fileChannel","chatChannel","fileChannel","createOffer","then","des","setLocalDescription","iceGatheringState","localOffer","JSON","stringify","localDescription","catch","errHandler","e","onopen","onmessage","type","Object","prototype","toString","call","receiveBuffer","push","receivedSize","byteLength","recFileProg","recFileDom","received","window","Blob","file_download","href","URL","createObjectURL","innerHTML","download","name","parse","fileInfo","max","sendData","send","timer","setInterval","stats","sendFileProg","sendFileDom","sendFileinChannel","onclose","getStats","key","res","googActiveConnection","bytesNow","bytesReceived","bytesPrev","enableChat","enable_chat","checked","sendMsg","text","sendTxt","chat","sliceFile","offset","reader","FileReader","onload","file","slice","readAsArrayBuffer","audioRTC","cb","context","AudioContext","streamAudioFile","files","match","readEvent","decodeAudioData","buffer","source","createBufferSource","start","connect","destination","remote","createMediaStreamDestination","localStream","stream","status","sendFile","fileTransfer","RTCPeerConnection","iceServers","urls","undefined","navigator","mediaDevices","getUserMedia","audio","video","micused","getAudioTracks","label","addStream","local","srcObject","src","muted","ondatachannel","channel","onicecandidate","cand","candidate","sdp","oniceconnectionstatechange","iceConnectionState","onaddstream","onconnection","onchange","remoteOfferGot","onclick","_remoteOffer","RTCSessionDescription","remoteOffer","setRemoteDescription","createAnswer","description","ref","c","onClick","defaultChecked","right","position","controls","autoPlay","rows","cols","localOfferSet","enableAudioFile","enable_mic","placeholder","overflow","action","App","unit","handleClick","dataset","className","id","data-unit","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.725b95ef.chunk.js","sourcesContent":["import React from 'react';\nimport QrReader from 'react-qr-reader';\n\nclass QRCodeScanner extends React.Component {\n  state = {\n    result: '',\n  };\n\n  handleScan = (data) => {\n    if (data) {\n      this.setState(({ result }) => {\n        if (!result.includes(data))\n          return {\n            result: result.concat(data),\n          };\n      });\n    }\n  };\n  handleError = (err) => {\n    console.error(err);\n  };\n  render() {\n    return (\n      <div style={{ margin: '20px auto' }}>\n        <QrReader\n          delay={600}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          style={{ width: '100%', maxWidth: '400px', margin: '0 auto' }}\n        />\n        <p>{this.state.result}</p>\n      </div>\n    );\n  }\n}\nexport default QRCodeScanner;\n","import React from 'react';\nimport QRCodeGen from 'qrcode.react';\n\nfunction chunkSubstr(str, size) {\n  const numChunks = Math.ceil(str.length / size);\n  const chunks = new Array(numChunks);\n\n  for (let i = 0, o = 0; i < numChunks; ++i, o += size) {\n    chunks[i] = str.substr(o, size);\n  }\n\n  return chunks;\n}\n\nclass QRCodeGenerator extends React.Component {\n  state = {\n    input: '',\n  };\n\n  handleChange = ({ target }) => {\n    const chunks = chunkSubstr(target.value, 400);\n\n    console.log('chunks', chunks);\n\n    chunks.forEach((chunk, idx) => {\n      setTimeout(() => this.setState({ input: chunk }), 1500 * idx);\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ margin: '20px auto' }}>\n        <QRCodeGen level=\"L\" size={400} value={this.state.input} />\n        <p>\n          <input onChange={this.handleChange} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default QRCodeGenerator;\n","import React from 'react';\n\nclass WebRTCVideoChat extends React.Component {\n  constructor() {\n    super();\n    const conf = { iceServers: [{ urls: [] }] };\n    this.pc = new RTCPeerConnection(conf);\n\n    this.localStream = undefined;\n    this.chatEnabled = undefined;\n    this._fileChannel = undefined;\n    this.context = undefined;\n    this.source = undefined;\n    this._chatChannel = undefined;\n    this.context = undefined;\n    this.sendFileDom = {};\n    this.recFileDom = {};\n    this.receiveBuffer = [];\n    this.receivedSize = 0;\n    this.file = undefined;\n    this.bytesPrev = 0;\n  }\n\n  componentDidMount() {\n    navigator.mediaDevices\n      .getUserMedia({ audio: true, video: true })\n      .then((stream) => {\n        console.log('stream', stream);\n        this.localStream = stream;\n        this.micused.innerHTML = this.localStream.getAudioTracks()[0].label;\n        this.pc.addStream(stream);\n        try {\n          this.local.srcObject = stream;\n        } catch (error) {\n          this.local.src = window.URL.createObjectURL(stream);\n        }\n        this.local.muted = true;\n      })\n      .catch(this.errHandler);\n\n    this.pc.ondatachannel = (e) => {\n      if (e.channel.label === 'fileChannel') {\n        console.log('fileChannel Received -', e);\n        this._fileChannel = e.channel;\n        this.fileChannel(e.channel);\n      }\n      if (e.channel.label === 'chatChannel') {\n        console.log('chatChannel Received -', e);\n        this._chatChannel = e.channel;\n        this.chatChannel(e.channel);\n      }\n    };\n    this.pc.onicecandidate = (e) => {\n      var cand = e.candidate;\n      console.log('onicecandidate', this);\n\n      if (!cand) {\n        console.log('iceGatheringState complete', this.pc.localDescription.sdp);\n        this.localOffer.value = JSON.stringify(this.pc.localDescription);\n      } else {\n        console.log(cand.candidate);\n      }\n    };\n    this.pc.oniceconnectionstatechange = () => {\n      console.log('iceconnectionstatechange: ', this.pc.iceConnectionState);\n    };\n    this.pc.onaddstream = (e) => {\n      console.log('remote onaddstream', e.stream);\n      try {\n        this.remote.srcObject = e.stream;\n      } catch (error) {\n        this.remote.src = window.URL.createObjectURL(e.stream);\n      }\n    };\n    this.pc.onconnection = (e) => {\n      console.log('onconnection ', e);\n    };\n    this.streamAudioFile.onchange = () => {\n      console.log('streamAudioFile');\n      this.context = new AudioContext();\n      var file = this.streamAudioFile.files[0];\n      if (file) {\n        if (file.type.match('audio*')) {\n          var reader = new FileReader();\n          reader.onload = (readEvent) => {\n            this.context.decodeAudioData(readEvent.target.result, (buffer) => {\n              // create an audio source and connect it to the file buffer\n              this.source = this.context.createBufferSource();\n              this.source.buffer = buffer;\n              this.source.start(0);\n\n              // connect the audio stream to the audio hardware\n              this.source.connect(this.context.destination);\n\n              // create a destination for the remote browser\n              var remote = this.context.createMediaStreamDestination();\n\n              // connect the remote destination to the source\n              this.source.connect(remote);\n\n              this.local.srcObject = remote.stream;\n              this.local.muted = true;\n              // add the stream to the peer connection\n              this.pc.addStream(remote.stream);\n\n              // create a SDP offer for the new stream\n              // pc.createOffer(setLocalAndSendMessage);\n            });\n          };\n\n          reader.readAsArrayBuffer(file);\n        }\n      }\n    };\n    this.fileTransfer.onchange = (e) => {\n      var files = this.fileTransfer.files;\n      if (files.length > 0) {\n        this.file = files[0];\n        this.sendFileDom.name = this.file.name;\n        this.sendFileDom.size = this.file.size;\n        this.sendFileDom.type = this.file.type;\n        this.sendFileDom.fileInfo = 'areYouReady';\n        console.log(this.sendFileDom);\n      } else {\n        console.log('No file selected');\n      }\n    };\n    this.remoteOfferGot.onclick = () => {\n      var _remoteOffer = new RTCSessionDescription(\n        JSON.parse(this.remoteOffer.value)\n      );\n      console.log('remoteOffer \\n', _remoteOffer);\n      this.pc\n        .setRemoteDescription(_remoteOffer)\n        .then(() => {\n          console.log('setRemoteDescription ok');\n          if (_remoteOffer.type === 'offer') {\n            this.pc\n              .createAnswer()\n              .then((description) => {\n                console.log('createAnswer 200 ok \\n', description);\n                this.pc\n                  .setLocalDescription(description)\n                  .then(() => {})\n                  .catch(this.errHandler);\n              })\n              .catch(this.errHandler);\n          }\n        })\n        .catch(this.errHandler);\n    };\n\n    this.enableChat();\n  }\n  setLocalOffer = () => {\n    if (this.chatEnabled) {\n      this._chatChannel = this.pc.createDataChannel('chatChannel');\n      this._fileChannel = this.pc.createDataChannel('fileChannel');\n      // _fileChannel.binaryType = 'arraybuffer';\n      this.chatChannel(this._chatChannel);\n      this.fileChannel(this._fileChannel);\n    }\n\n    this.pc\n      .createOffer()\n      .then((des) => {\n        console.log('createOffer ok ');\n        this.pc\n          .setLocalDescription(des)\n          .then(() => {\n            setTimeout(() => {\n              if (this.pc.iceGatheringState === 'complete') {\n                return;\n              } else {\n                console.log('after GetherTimeout');\n                this.localOffer.value = JSON.stringify(\n                  this.pc.localDescription\n                );\n              }\n            }, 2000);\n            console.log('setLocalDescription ok');\n          })\n          .catch(this.errHandler);\n        // For chat\n      })\n      .catch(this.errHandler);\n  };\n\n  fileChannel = (e) => {\n    this._fileChannel.onopen = (e) => {\n      console.log('file channel is open', e);\n    };\n    this._fileChannel.onmessage = (e) => {\n      // Figure out data type\n      var type = Object.prototype.toString.call(e.data),\n        data;\n      if (type === '[object ArrayBuffer]') {\n        data = e.data;\n        this.receiveBuffer.push(data);\n        this.receivedSize += data.byteLength;\n        this.recFileProg.value = this.receivedSize;\n        if (this.receivedSize === this.recFileDom.size) {\n          var received = new window.Blob(this.receiveBuffer);\n          this.file_download.href = URL.createObjectURL(received);\n          this.file_download.innerHTML = 'download';\n          this.file_download.download = this.recFileDom.name;\n          // rest\n          this.receiveBuffer = [];\n          this.receivedSize = 0;\n          // clearInterval(window.timer);\n        }\n      } else if (type === '[object String]') {\n        data = JSON.parse(e.data);\n      } else if (type === '[object Blob]') {\n        data = e.data;\n        this.file_download.href = URL.createObjectURL(data);\n        this.file_download.innerHTML = 'download';\n        this.file_download.download = this.recFileDom.name;\n      }\n\n      // Handle initial msg exchange\n      if (data.fileInfo) {\n        if (data.fileInfo === 'areYouReady') {\n          this.recFileDom = data;\n          this.recFileProg.max = data.size;\n          var sendData = JSON.stringify({ fileInfo: 'readyToReceive' });\n          this._fileChannel.send(sendData);\n          window.timer = setInterval(() => {\n            this.stats();\n          }, 1000);\n        } else if (data.fileInfo === 'readyToReceive') {\n          this.sendFileProg.max = this.sendFileDom.size;\n          this.sendFileinChannel(); // Start sending the file\n        }\n        console.log('_fileChannel: ', data.fileInfo);\n      }\n    };\n    this._fileChannel.onclose = () => {\n      console.log('file channel closed');\n    };\n  };\n\n  stats = () => {\n    this.pc.getStats(null, (stats) => {\n      for (var key in stats) {\n        var res = stats[key];\n        console.log(res.type, res.googActiveConnection);\n        if (\n          res.type === 'googCandidatePair' &&\n          res.googActiveConnection === 'true'\n        ) {\n          // calculate current bitrate\n          var bytesNow = res.bytesReceived;\n          console.log('bit rate', bytesNow - this.bytesPrev);\n          this.bytesPrev = bytesNow;\n        }\n      }\n    });\n  };\n\n  enableChat = () => {\n    this.enable_chat.checked\n      ? (this.chatEnabled = true)\n      : (this.chatEnabled = false);\n  };\n\n  sendMsg = () => {\n    var text = this.sendTxt.value;\n    this.chat.innerHTML =\n      this.chat.innerHTML + '<pre class=sent>' + text + '</pre>';\n    this._chatChannel.send(text);\n    this.sendTxt.value = '';\n    return false;\n  };\n\n  chatChannel(e) {\n    this._chatChannel.onopen = (e) => {\n      console.log('chat channel is open', e);\n    };\n    this._chatChannel.onmessage = (e) => {\n      this.chat.innerHTML = this.chat.innerHTML + '<pre>' + e.data + '</pre>';\n    };\n    this._chatChannel.onclose = () => {\n      console.log('chat channel closed');\n    };\n  }\n\n  sendFileinChannel = () => {\n    var chunkSize = 16384;\n    var sliceFile = (offset) => {\n      var reader = new window.FileReader();\n      reader.onload = (() => {\n        return (e) => {\n          this._fileChannel.send(e.target.result);\n          if (this.file.size > offset + e.target.result.byteLength) {\n            window.setTimeout(sliceFile, 0, offset + chunkSize);\n          }\n          this.sendFileProg.value = offset + e.target.result.byteLength;\n        };\n      })(this.file);\n      var slice = this.file.slice(offset, offset + chunkSize);\n      reader.readAsArrayBuffer(slice);\n    };\n    sliceFile(0);\n  };\n\n  audioRTC = (cb) => {\n    console.log('streamAudioFile');\n    this.context = new AudioContext();\n    var file = this.streamAudioFile.files[0];\n    if (file) {\n      if (file.type.match('audio*')) {\n        var reader = new FileReader();\n        reader.onload = (readEvent) => {\n          this.context.decodeAudioData(readEvent.target.result, (buffer) => {\n            // create an audio source and connect it to the file buffer\n            var source = this.context.createBufferSource();\n            source.buffer = buffer;\n            source.start(0);\n\n            // connect the audio stream to the audio hardware\n            source.connect(this.context.destination);\n\n            // create a destination for the remote browser\n            var remote = this.context.createMediaStreamDestination();\n\n            // connect the remote destination to the source\n            source.connect(remote);\n            window.localStream = remote.stream;\n            cb({ status: 'success', stream: true });\n          });\n        };\n\n        reader.readAsArrayBuffer(file);\n      }\n    }\n  };\n\n  sendFile = () => {\n    if (!this.fileTransfer.value) return;\n    var fileInfo = JSON.stringify(this.sendFileDom);\n    this._fileChannel.send(fileInfo);\n    console.log('file info sent');\n  };\n\n  errHandler = (err) => {\n    console.log(err);\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input\n            type=\"checkbox\"\n            ref={(c) => {\n              this.enable_chat = c;\n            }}\n            onClick={this.enableChat}\n            defaultChecked\n          />\n          > Enable chat\n          <span\n            // id=\"micused\"\n            ref={(c) => {\n              this.micused = c;\n            }}\n            style={{ right: 0, position: 'fixed' }}\n          />\n        </div>\n        <div>\n          <p>\n            <video\n              ref={(c) => {\n                this.local = c;\n              }}\n              width={250}\n              //   id=\"local\"\n              controls\n              autoPlay\n            />\n            Local\n            <textarea\n              rows=\"4\"\n              cols=\"50\"\n              //   id=\"localOffer\"\n              ref={(c) => {\n                this.localOffer = c;\n              }}\n            />\n            <button\n              //   id=\"localOfferSet\"\n              ref={(c) => {\n                this.localOfferSet = c;\n              }}\n              onClick={this.setLocalOffer}\n            >\n              CreateOffer\n            </button>\n          </p>\n        </div>\n        <div>\n          <h4>LocalStream</h4>\n          <input\n            type=\"checkbox\"\n            // id=\"enableAudioFile\"\n            ref={(c) => {\n              this.enableAudioFile = c;\n            }}\n          />\n          Audio File\n          <input\n            type=\"file\"\n            // id=\"streamAudioFile\"\n            ref={(c) => {\n              this.streamAudioFile = c;\n            }}\n          />\n          <br />\n          <input\n            type=\"checkbox\"\n            // id=\"enable_mic\"\n            ref={(c) => {\n              this.enable_mic = c;\n            }}\n            defaultChecked\n          />\n          Microphone\n        </div>\n        <div>\n          <p>\n            <video\n              width={250}\n              //   id=\"remote\"\n              ref={(c) => {\n                this.remote = c;\n              }}\n              controls\n              autoPlay\n            />\n            Remote\n            <textarea\n              //   id=\"remoteOffer\"\n              ref={(c) => {\n                this.remoteOffer = c;\n              }}\n              rows=\"4\"\n              cols=\"50\"\n              placeholder=\"Paste remote SDP\"\n            />\n            <button\n              ref={(c) => {\n                this.remoteOfferGot = c;\n              }}\n              //   id=\"remoteOfferGot\"\n            >\n              Answer\n            </button>\n          </p>\n        </div>\n        <div\n          //   id=\"chat\"\n          ref={(c) => {\n            this.chat = c;\n          }}\n          style={{ overflow: 'scroll' }}\n        />\n        <div>\n          <br />\n          <br />\n          <form action=\"\">\n            <input\n              //   id=\"sendTxt\"\n              ref={(c) => {\n                this.sendTxt = c;\n              }}\n              type=\"text\"\n              name=\"\"\n              placeholder=\"chat here\"\n              size=\"50\"\n            />\n            <button type=\"button\" onClick={this.sendMsg}>\n              send\n            </button>\n          </form>\n        </div>\n        <div>\n          <p>File transfer:</p>\n          <div>\n            <progress\n              value=\"0\"\n              //   id=\"sendFileProg\"\n              ref={(c) => {\n                this.sendFileProg = c;\n              }}\n            />\n            <input\n              type=\"file\"\n              name=\"\"\n              //   id=\"fileTransfer\"\n              ref={(c) => {\n                this.fileTransfer = c;\n              }}\n            />\n            <button type=\"submit\" onClick={this.sendFile}>\n              send\n            </button>\n          </div>\n          <div>\n            <p>\n              <progress\n                value=\"0\"\n                // id=\"recFileProg\"\n                ref={(c) => {\n                  this.recFileProg = c;\n                }}\n              />\n              <button\n                // id=\"file_download\"\n                ref={(c) => {\n                  this.file_download = c;\n                }}\n              >\n                File Download\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WebRTCVideoChat;\n","import React from 'react';\n\nimport QRCodeScanner from './components/QRCodeScanner';\nimport QRCodeGenerator from './components/QRCodeGenerator';\nimport WebRTCVideoChat from './components/WebRTCVideoChat';\n\nimport './App.css';\n\nclass App extends React.Component {\n  // componentDidMount() {\n  //   require('./components/WEBRTC-demo');\n  // }\n\n  state = {\n    unit: 'baby',\n  };\n\n  handleClick = ({ target }) => {\n    const { unit } = target.dataset;\n    this.setState({ unit });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"debug\"></div>\n\n        {this.state.unit === 'baby' ? <QRCodeGenerator /> : <QRCodeScanner />}\n\n        <button onClick={this.handleClick} data-unit=\"baby\">\n          Baby Unit\n        </button>\n        <button onClick={this.handleClick} data-unit=\"parent\">\n          Parent Unit\n        </button>\n        <WebRTCVideoChat />\n\n        {/* <div>\n          <input\n            type=\"checkbox\"\n            id=\"enable_chat\"\n            onClick=\"enableChat()\"\n            defaultChecked\n          />\n          > Enable chat\n          <span id=\"micused\" style={{ right: 0, position: 'fixed' }} />\n        </div> */}\n\n        {/* <div>\n          <h4>LocalStream</h4>\n          <input type=\"checkbox\" id=\"enableAudioFile\" />\n          Audio File\n          <input type=\"file\" id=\"streamAudioFile\" />\n          <br />\n          <!-- <input type=\"checkbox\" id=\"enable_mic\" defaultChecked>Microphone -->\n        </div> */}\n        {/* <div>\n          <p>\n            <video width={250} id=\"local\" controls autoPlay />\n            Local\n            <textarea rows=\"4\" cols=\"50\" id=\"localOffer\" />\n            <button id=\"localOfferSet\">CreateOffer</button>\n          </p>\n        </div> */}\n        {/* <div>\n          <p>\n            <video width={250} id=\"remote\" controls autoPlay />\n            Remote\n            <textarea\n              id=\"remoteOffer\"\n              rows=\"4\"\n              cols=\"50\"\n              placeholder=\"Paste remote SDP\"\n            />\n            <button id=\"remoteOfferGot\">Answer</button>\n          </p>\n        </div>\n        <div id=\"chat\" style={{ overflow: 'scroll' }} />\n        <div>\n          <br />\n          <br />\n          <form action=\"\">\n            <input\n              id=\"sendTxt\"\n              type=\"text\"\n              name=\"\"\n              placeholder=\"chat here\"\n              size=\"50\"\n            />\n            <button type=\"button\" onClick=\"sendMsg()\">\n              send\n            </button>\n          </form>\n        </div>\n        <div>\n          <p>File transfer:</p>\n          <div>\n            <progress value=\"0\" id=\"sendFileProg\" />\n            <input type=\"file\" name=\"\" id=\"fileTransfer\" />\n            <button type=\"submit\" onClick=\"sendFile()\">\n              send\n            </button>\n          </div>\n          <div>\n            <p>\n              <progress value=\"0\" id=\"recFileProg\" />\n              <button id=\"file_download\">File Download</button>\n            </p>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'webrtc-adapter';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}